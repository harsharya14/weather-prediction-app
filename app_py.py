# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L_VE3UXta0iTigETt4-GuHYjTDtyffxP
"""

!pip install streamlit

# Streamlit libraries
import streamlit as st
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Title for the Streamlit app
st.title("Weather Prediction App")
st.write("Predict weather conditions (Sunny, Rainy, Cloudy) using your dataset!")

# Step 1: Upload Dataset
uploaded_file = st.file_uploader("Upload your weather dataset (CSV file)", type="csv")

if uploaded_file is not None:
    # Load dataset
    data = pd.read_csv(uploaded_file)
    st.write("Dataset Preview:")
    st.write(data.head())

    # Check for missing values
    st.write("\nMissing Values:")
    st.write(data.isnull().sum())

    # Fill missing values
    data.fillna(data.mean(numeric_only=True), inplace=True)
    data.fillna(data.mode().iloc[0], inplace=True)

    # Encode categorical features
    label_encoder = LabelEncoder()
    if 'Weather' in data.columns:
        data['Weather'] = label_encoder.fit_transform(data['Weather'])

    categorical_cols = data.select_dtypes(include=['object']).columns
    for col in categorical_cols:
        data[col] = label_encoder.fit_transform(data[col])

    # Features and Target selection
    if 'Weather' in data.columns:
        X = data.drop('Weather', axis=1)
        y = data['Weather']
    else:
        st.error("Dataset must contain a 'Weather' column for predictions.")
        st.stop()

    # Normalize features
    scaler = StandardScaler()
    X = scaler.fit_transform(X)

    # Train a Random Forest model
    model = RandomForestClassifier(random_state=42)
    model.fit(X, y)

    # User inputs for prediction
    st.sidebar.header("Input Features for Prediction")
    user_inputs = {}
    for col in data.columns[:-1]:  # Exclude target column
        user_inputs[col] = st.sidebar.number_input(f"Enter {col}", float(data[col].min()), float(data[col].max()))

    # Convert inputs to DataFrame
    user_input_df = pd.DataFrame([user_inputs])

    # Scale user inputs
    user_input_scaled = scaler.transform(user_input_df)

    # Predict
    if st.button("Predict Weather Condition"):
        prediction = model.predict(user_input_scaled)
        predicted_label = label_encoder.inverse_transform(prediction)
        st.success(f"Predicted Weather Condition: {predicted_label[0]}")