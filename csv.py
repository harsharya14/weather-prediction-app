# -*- coding: utf-8 -*-
"""CSV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11sxVKEmSvBRoeDcLGa7I6tDX61eJihfz
"""

import pandas as pd

# Create a sample meteorological dataset
data = {
    'Temperature': [30, 22, 25, 18, 27, 24, 20, 31, 19, 28],
    'Humidity': [70, 80, 75, 90, 65, 85, 95, 60, 88, 66],
    'WindSpeed': [5, 10, 15, 12, 7, 9, 8, 4, 11, 6],
    'Pressure': [1012, 1010, 1008, 1011, 1013, 1009, 1007, 1014, 1006, 1015],
    'Weather': ['Sunny', 'Rainy', 'Cloudy', 'Rainy', 'Sunny', 'Cloudy', 'Rainy', 'Sunny', 'Cloudy', 'Sunny']
}

# Convert to DataFrame
df = pd.DataFrame(data)

# Save to CSV
df.to_csv('sample_weather_data.csv', index=False)

print("Sample dataset saved as 'sample_weather_data.csv'.")

from google.colab import files
files.download('sample_weather_data.csv')

# Import necessary libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder, StandardScaler

# Step 1: Load the dataset
# Replace 'your_dataset.csv' with the path to your meteorological data file
data = pd.read_csv('/content/sample_weather_data.csv')

# Step 2: Inspect the dataset
print("First 5 rows of the dataset:")
print(data.head())

# Check for missing values
print("\nMissing values in each column:")
print(data.isnull().sum())

# Fill missing values (if any) with mean/mode
data.fillna(data.mean(numeric_only=True), inplace=True)
data.fillna(data.mode().iloc[0], inplace=True)

# Step 3: Encode target variable and categorical features
# Assuming 'Weather' is the target column (sunny, rainy, cloudy)
label_encoder = LabelEncoder()
data['Weather'] = label_encoder.fit_transform(data['Weather'])  # Encode labels

# Encode other categorical features, if applicable
categorical_cols = data.select_dtypes(include=['object']).columns
for col in categorical_cols:
    data[col] = label_encoder.fit_transform(data[col])

# Step 4: Feature selection
# Assuming the last column is the target
X = data.drop('Weather', axis=1)
y = data['Weather']

# Normalize numerical features (optional, improves performance for some models)
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Step 5: Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 6: Train a Random Forest Classifier
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)

# Step 7: Evaluate the model
y_pred = model.predict(X_test)

print("\nAccuracy Score:", accuracy_score(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

print("\nConfusion Matrix:")
print(confusion_matrix(y_test, y_pred))

# Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the dataset
# Replace 'sample_weather_data.csv' with your dataset's file path
df = pd.read_csv('/content/sample_weather_data.csv')

# Display the first few rows of the dataset
print("Dataset Preview:")
print(df.head())

# Basic information about the dataset
print("\nDataset Info:")
print(df.info())

# Descriptive statistics
print("\nDataset Statistics:")
print(df.describe())

# Check for missing values
print("\nMissing Values in Each Column:")
print(df.isnull().sum())

# Visualize the distribution of numerical features
numerical_features = ['Temperature', 'Humidity', 'WindSpeed', 'Pressure']

for feature in numerical_features:
    plt.figure(figsize=(8, 5))
    sns.histplot(df[feature], kde=True, bins=20, color='blue')
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')
    plt.show()
# Select only numeric columns for correlation
numeric_cols = df.select_dtypes(include=['float64', 'int64']).columns
correlation_matrix = df[numeric_cols].corr()

# Visualize the correlation matrix
plt.figure(figsize=(10, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Matrix')
plt.show()

# Count plot for target variable (Weather)
plt.figure(figsize=(8, 5))
sns.countplot(x='Weather', data=df, palette='Set2')
plt.title('Distribution of Weather Conditions')
plt.xlabel('Weather')
plt.ylabel('Count')
plt.show()

# Boxplots to visualize relationships between numerical features and target
for feature in numerical_features:
    plt.figure(figsize=(8, 5))
    sns.boxplot(x='Weather', y=feature, data=df, palette='Set3')
    plt.title(f'{feature} vs Weather')
    plt.xlabel('Weather')
    plt.ylabel(feature)
    plt.show()

# Pair plot to explore pairwise relationships
sns.pairplot(df, hue='Weather', palette='Set1')
plt.show()